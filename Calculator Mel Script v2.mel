//Script that performs different mathematic operations according to users inputs.

float $numbers[] = {7, 6, 1, 2, 8, 2, 2, 6, 2, 2, 5, 10, 6, 19};
float $test1[] = {3, 4};

proc float Calculate(string $keyword, float $num[])
{
    //Addition
    if ($keyword == "Add" || $keyword == "add")
    {
        for ($i = 0; $i < size($num); $i++)
        {
            print($num[$i]);
            if ($i != size($num)-1)
            {
                print(" + ");
            }
        }
        print(" = " + Add($num) + "\n");
        return Add($num);
    }
    //Subtraction
    else if ($keyword == "Subtract" || $keyword == "subtract")
    {
        for ($i = 0; $i < size($num); $i++)
        {
            print($num[$i]);
            if ($i != size($num)-1)
            {
                print(" - ");
            }
        }
        print(" = " + Subtract($num) + "\n");
        return Subtract($num);
    }
    //Multiplication
    else if ($keyword == "Multiply" || $keyword == "multiply")
    {
        for ($i = 0; $i < size($num); $i++)
        {
            print($num[$i]);
            if ($i != size($num)-1)
            {
                print(" * ");
            }
        }
        print(" = " + Multiply($num) + "\n");
        return Multiply($num);
    }
    //Division
    else if ($keyword == "Divide" || $keyword == "divide")
    {
        for ($i = 0; $i < size($num); $i++)
        {
            print($num[$i]);
            if ($i != size($num)-1)
            {
                print(" / ");
            }
        }
        print(" = " + Divide($num) + "\n");
        return Divide($num);
    }
    //Raise to power (NOTE: Takes only the first two numbers of the array.)
    else if ($keyword == "Raise To Power" || $keyword == "raise to power" || $keyword == "RaiseToPower" || $keyword == "raisetopower" || $keyword == "Raise" || $keyword == "raise" || $keyword == "Power" || $keyword == "power" || $keyword == "Exponent" || $keyword == "exponent" || $keyword == "Exponentiate" || $keyword == "exponentiate")
    {
        for ($i = 0; $i < size($num); $i++)
        {
            print($num[$i]);
            if ($i != size($num)-1)
            {
                print(" to the power of ");
            }
        }
        print(" = " + Power($num[0], $num[1]) + "\n");
        return Power($num[0], $num[1]);
    }
    //Mean
    else if ($keyword == "Mean" || $keyword == "mean")
    {
        print("The mean of ");
        for ($i = 0; $i < size($num); $i++)
        {
            if ($i != size($num)-1)
            {
                print($num[$i]);
                print(", ");
            }
            else
            {
                print("and ");
                print($num[$i]);
            }
        }
        print(" is " + Mean($num) + "." + "\n");
        return Mean($num);
    }
    //Median
    else if ($keyword == "Median" || $keyword == "median")
    {
        print("The median of ");
        for ($i = 0; $i < size($num); $i++)
        {
            if ($i != size($num)-1)
            {
                print($num[$i]);
                print(", ");
            }
            else
            {
                print("and ");
                print($num[$i]);
            }
        }
        print(" is " + Median($num) + "." + "\n");
        return Median($num);
    }
    //Mode
    else if ($keyword == "Mode" || $keyword == "mode")
    {
        print("The mode of ");
        for ($i = 0; $i < size($num); $i++)
        {
            if ($i != size($num)-1)
            {
                print($num[$i]);
                print(", ");
            }
            else
            {
                print("and ");
                print($num[$i]);
            }
        }
        print(" is " + Mode($num) + "." + "\n");
        return Mode($num);
    }
    else
    {
        return 0;
        print("No keyword recognized.");
    }
}

//Add
global proc float Add(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value += $num[$i] + 1;
    }
    return $value;
}

//Subtract
global proc float Subtract(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value -= $num[$i] + 1;
    }
    return $value;
}

//Multiply
global proc float Multiply(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value *= $num[$i] + 1;
    }
    return $value;
}

//Divide
global proc float Divide(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value /= $num[$i] + 1;
    }
    return $value;
}

//Raise to the power of x.
proc float Power(float $num, float $power)
{
    float $value = $num;
    for ($i = 0; $i < $power - 1; $i++)
    {
        $value *= $num;
    }
    return $value;
}

//Find the mean
global proc float Mean(float $num[])
{
    float $value = 0;
    for ($i = 0; $i < size($num); $i++)
    {
        $value += $num[$i];
    }
    return $value / size($num);
}

//Find the median
global proc float Median(float $num[])
{
    float $arraySize = size($num);
    float $medianNum = 0;
    float $difference = 0;
    float $halfwayPoint = $arraySize/2;
    int $roundedPoint = `floor $halfwayPoint`;
    int $secondPoint = 0;

    ArrangeFloatArray($num);

    if ($halfwayPoint != $roundedPoint) 
    {
        $medianNum = $num[$roundedPoint];
    }
    else //This means there are two median numbers to check.
    {
        $secondPoint = $num[$roundedPoint];
        $medianNum = $num[$roundedPoint - 1];
        $difference = $secondPoint - $medianNum;
        
        if ($difference != 0)
        {
            $difference /= 2;
        }
        $medianNum += $difference;
    }
    
    return $medianNum;
}

//Find the mode.
global proc float Mode(float $num[])
{
    float $previousNum = 0;
    float $currentNum = 0;
    float $highestValue = 1;
    float $modeNum = 0;
    
    ArrangeFloatArray($num);
    
    for ($i = 0; $i < size($num); $i++)
    {
        if ($num[$i] == $previousNum)
        {
            $highestValue++;
        }
        else
        {
            $highestValue = 1;
        }
        
        $previousNum = $num[$i];
        
        if ($currentNum < $highestValue)
        {
            $currentNum = $highestValue;
            $modeNum = $num[$i];
        }
    }
    return $modeNum;
}

//Reorder an array.
global proc float[] ArrangeFloatArray(float $num[])
{
    for ($i = 0; $i < size($num); $i++)
    {
        if (!$i == 0)
        {
            if ($num[$i] < $num[$i-1])
            {
                floatArrayInsertAtIndex($i - 1, $num, $num[$i]); 
                floatArrayRemoveAtIndex($i + 1, $num);
                if ($i > 1)
                {
                   $i -= 2; 
                }
                else
                {
                    $i--;
                }
            }
        }
    }
    return $num;
}

Calculate("median", $numbers);