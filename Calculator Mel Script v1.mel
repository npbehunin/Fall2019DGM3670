//Script that performs different mathematic operations according to users inputs.

float $numbers[] = {7, 6, 1, 2, 8, 2, 2, 6, 2, 2, 5, 10, 6, 19};

//Add
proc float Add(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value += $num[$i] + 1;
    }
    return $value;
}

//Subtract
proc float Subtract(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value -= $num[$i] + 1;
    }
    return $value;
}

//Multiply
proc float Multiply(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value *= $num[$i] + 1;
    }
    return $value;
}

//Divide
proc float Divide(float $num[])
{
    float $value = $num[0];
    for ($i = 0; $i < size($num) - 1; $i++)
    {
        $value /= $num[$i] + 1;
    }
    return $value;
}

//Raise to the power of x.
proc float Power(float $num, float $power)
{
    float $value = $num;
    for ($i = 0; $i < $power - 1; $i++)
    {
        $value *= $num;
    }
    return $value;
}

//Find the mean
proc float Mean(float $num[])
{
    float $value = 0;
    for ($i = 0; $i < size($num); $i++)
    {
        $value += $num[$i];
    }
    return $value / size($num);
}

//Find the median
proc float Median(float $num[]) //*Unfinished
{
    float $arraySize = size($num);
    float $medianNum = 0;
    float $difference = 0;
    float $halfwayPoint = $arraySize/2;
    int $roundedPoint = `floor $halfwayPoint`;
    int $secondPoint = 0;

    ArrangeFloatArray($num);

    if ($halfwayPoint != $roundedPoint) 
    {
        $medianNum = $num[$roundedPoint];
    }
    else //This means there are two median numbers to check.
    {
        $secondPoint = $num[$roundedPoint];
        $medianNum = $num[$roundedPoint - 1];
        $difference = $secondPoint - $medianNum;
        
        if ($difference != 0)
        {
            $difference /= 2;
        }
        $medianNum += $difference;
    }
    
    return $medianNum;
}

//Find the mode.
proc float Mode(float $num[])
{
    float $value = 0;
    float $highestValue = 1;
    float $modeNum = 0;
    
    ArrangeFloatArray($num);
    
    for ($i = 0; $i < size($num); $i++)
    {
        if ($num[$i] == $value)
        {
            $highestValue++;
        }
        else
        {
            $value = $num[$i];
            $highestValue = 1;
        }
        
        $value = $num[$i];
        
        if ($modeNum < $highestValue)
        {
            $modeNum = $num[$i];
        }
    }
    return $modeNum;
    print($modeNum);
}

//Reorder an array.
proc float[] ArrangeFloatArray(float $num[])
{
    for ($i = 0; $i < size($num); $i++)
    {
        if (!$i == 0)
        {
            if ($num[$i] < $num[$i-1])
            {
                floatArrayInsertAtIndex($i - 1, $num, $num[$i]); 
                floatArrayRemoveAtIndex($i + 1, $num);
                if ($i > 1)
                {
                   $i -= 2; 
                }
                else
                {
                    $i--;
                }
            }
        }
    }
    print ($num);
    return $num;
}

Median($numbers);
//Mode($numbers);